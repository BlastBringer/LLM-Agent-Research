parse_and_classify_task:
  name: Parse and classify task
  description: >
    Parse a raw math input provided by the user and determine:
    1. The mathematical expression(s) or equation(s) present
    2. The user's intent (e.g., classify, solve, explain)
    3. The type of task (symbolic, numeric, or lookup)

    Your job is to bridge natural language and formal math structure, enabling further processing by the correct tools or planners.
  expected_output: >
    A structured object (e.g., JSON) containing:
    - extracted expression(s),
    - identified intent,
    - task type tag (one of: symbolic, numeric, lookup).
  agent: interpreter



classify_task_type:
  name: Classify task type
  description: >
    Based on the parsed math task, classify it into one of the following types:
    1. Symbolic (e.g., algebra, simplification)
    2. Numeric (e.g., calculation, solve-for-value)
    3. Lookup (e.g., fetch a known constant or rule)

    This helps in routing the task to the correct solver or tool.
  expected_output: >
    A task object updated with a `task_type` field indicating its classification.
  agent: type_classifier

  
select_tool_task:
  name: Select Tool Task
  description: >
    Given a parsed and classified math task, select the most appropriate tool(s) needed
    to process or solve the task. Consider:
    1. The type of task (symbolic, numeric, lookup)
    2. The user's intent (e.g., solve, explain, simplify)
    3. Any plans or routing metadata passed in context

    Your job is to act as the decision-making layer, determining which computational
    tool(s) should be invoked next and returning the tool selection in a structured format.
  expected_output: >
    A structured object (e.g., JSON) containing:
    - selected_tool(s): a list of tool names or actions to be invoked
    - justification: a short explanation of why the tool(s) were selected
  agent: tool_selector


aggregate_results_task:
  name: Aggregate Results
  description: >
    Collect and summarize the outputs from all previous agents in the pipeline. 
    For each contributing agent, include:
    - Agent Name
    - What the agent did (its role or contribution)
    - A clean summary of its output

    Present this as a readable, organized report for the user.

    You should dynamically handle any number of upstream agents without hardcoding them.
    Use the agent names and their available context/output to structure the final report.

  expected_output: >
    A well-formatted natural language report that looks like this:

    ---
    **Agent: Interpreter**
    Role: Parsed the user's math input
    Output:
    - Parsed Expression: (3x + 2x) - (x - 4)
    - Detected Intent: Simplify

    **Agent: Type Classifier**
    Role: Determined the kind of math problem
    Output:
    - Task Type: Symbolic

    **Agent: Tool Selector**
    Role: Picked the best tool for solving
    Output:
    - Tool: SymPy
    - Reason: It handles symbolic math tasks

    (…and so on for any other agents…)

    **Final Summary:**
    The user asked for a simplification. Based on parsing and classification, 
    the system used SymPy to simplify the expression to: 4x + 4.
    ---

    Output must be clean, labeled by agent, and sorted in logical order.
    Avoid JSON or code formatting; use bold labels and newlines for readability.
  agent: result_aggregator



execute_symbolic_task:
  name: Execute Symbolic Expression
  description: >
    Receive a symbolic expression in SymPy syntax and compute the result.
    Do not interpret or explain—just execute the expression using SymPy and return the raw output.
  expected_output: >
    Raw SymPy result as a string or value (e.g., '4*x + 4')
  agent: sympy_executor



execute_numeric_computation:
  name: Execute Numeric Computation
  description: >
    Evaluate the provided mathematical problem using numerical computation.
    Use NumPy or SciPy to compute a result. Focus on numeric precision and efficiency.

    Input: A numeric expression or code snippet.
  expected_output: >
    A clear numerical result, such as a final value, matrix, or array outcome,
    depending on the problem input.
  agent: numeric_executor

search_math_knowledge:
  name: Search for Mathematical Knowledge
  description: >
    Look up relevant mathematical information, facts, or constants.
    This may include definitions, theorems, historical context, or fixed values.

    Input: A query string describing what needs to be looked up.
  expected_output: >
    A concise but informative paragraph explaining the retrieved fact
    or resource, along with the source name (e.g., Wikipedia).
  agent: search_agent

verify_result:
  name: Verify Computation Result
  description: >
    Assess the correctness and consistency of the output generated by
    other executor agents. Determine if a retry is necessary and annotate
    any discrepancies or confirmations.

    Input: A result string or numeric/symbolic output.
  expected_output: >
    - A statement indicating whether the result is verified or not.
    - If invalid, a message explaining why and what should be retried.
  agent: verifier


clean_output:
  name: Clean and Present Final Output
  description: >
    Format the final, verified output in a user-friendly and readable form.
    This could include rounding values, simplifying text, or rephrasing explanations.

    Input: A verified result.
  expected_output: >
    A clean, easy-to-read explanation or answer suitable for display to the user.
  agent: output_cleaner
  context:
    - Verify Result
